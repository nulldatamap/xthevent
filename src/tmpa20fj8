extern crate rustc_serialize as serialze;
#[macro_use] extern crate nickel;
extern crate postgres;
extern crate crypto;

use nickel::{Nickel, HttpRouter};
use postgres::{Connection, SslMode};

type Id = i32;

struct Event {
  id : Id,
  tournament : bool,
  title : String,
  date_time           timestamp not null,
  unconfirmed_players Vec<Id> not null,
  confirmed_players   Vec<Id> not null,
  active              boolean   not null
}

struct "User" {
  id            I,
  steam_id      String   not null,
  name          String   not null,
  email         String   not null,
  player_tag    String,
  rank          String
}

struct Account {
  id            i32,
  password_hash Vec<u8>     not null,
  password_salt Vec<u8>     not null,
  email         String      not null,
  session_token String,
  expiration    timestamp
}

struct Registration {
  token         String  not null,
  steam_id      String  not null,
  name          String  not null,
  email         String  not null,
  player_tag    String,
  rank          String,
  password_hash Vec<u8> not null,
  password_salt Vec<u8> not null
}


static DB_ADDR : &'static str = "postgres://postgres:valiantflamingroostercar@shiftdesign.me/xthtest";

fn setup_database( conn : &mut Connection ) {
  conn.batch_execute( include_str!( "schema.sql" ) ).unwrap();
}

fn insert_user( conn : &mut Connection, user : User ) {
  conn.execute( "INSERT INTO \"User\"
                  (id, steam_id, name, email, player_tag, rank)
                VALUES
                  ($1, $2, $3, $4, $5, $6)"
              , &[ &user.id, &user.steam_id, &user.name
                 , &user.email, &user.player_tag, &user.rank ] ).unwrap();
}

fn main() {
  let mut conn = Connection::connect( DB_ADDR, &SslMode::None).unwrap();
  /*let mut server = Nickel::new();
  
  server.get("**", middleware!("Hello World"));
  
  server.listen("127.0.0.1:491");*/
}